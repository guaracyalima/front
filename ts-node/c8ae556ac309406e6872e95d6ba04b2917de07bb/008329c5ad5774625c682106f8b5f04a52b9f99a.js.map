{"version":3,"file":"/home/guabirabadev/dev/elejase-frontend/GulpFile.ts","sources":["/home/guabirabadev/dev/elejase-frontend/GulpFile.ts"],"names":[],"mappings":"AAAA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,MAAM,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACvC,MAAM,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC9C,MAAM,SAAS,GAAG,GAAG,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;AACrD,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACtC;;GAEG;AACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE;IAClB,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC;AACH;;GAEG;AACH,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;IACjB,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC;SACjC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;SACvB,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IACvB,MAAM,CAAC,QAAQ,CAAC,EAAE;SACb,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC;AACH;;GAEG;AACH,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;IACnB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;SACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC;AACH;;GAEG;AACH,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;IACd,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;QACR,4BAA4B;QAC5B,mCAAmC;QACnC,6BAA6B;QAC7B,6BAA6B;QAC7B,SAAS;QACT,iBAAiB;QACjB,aAAa;QACb,WAAW;KACd,EAAE,EAAC,GAAG,EAAE,iBAAiB,EAAC,CAAC,CAAC,yBAAyB;SACrD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC;AACH;;GAEG;AACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;IACf,IAAI,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC;QAC7D,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,CAAC,CAAC,IAAI,GAAG,+BAA+B,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,cAAc,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC;QACjF,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,CAAC,CAAC,IAAI,GAAG,8BAA8B,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH;;GAEG;AACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,MAAM,CAAC,EAAE;IACjD,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC","sourcesContent":["const gulp = require(\"gulp\");\nconst del = require(\"del\");\nconst tsc = require(\"gulp-typescript\");\nconst sourcemaps = require('gulp-sourcemaps');\nconst tsProject = tsc.createProject(\"tsconfig.json\");\nconst tslint = require('gulp-tslint');\n/**\n * Remove a pasta build\n */\ngulp.task('clean', (cb) => {\n    return del([\"build\"], cb);\n});\n/**\n * Compila o Typescript e criar os sourcemaps\n */\ngulp.task(\"compile\", () => {\n    let tsResult = gulp.src(\"src/**/*.ts\")\n        .pipe(sourcemaps.init())\n        .pipe(tsProject());\n    return tsResult.js\n        .pipe(sourcemaps.write(\".\"))\n        .pipe(gulp.dest(\"build\"));\n});\n/**\n * Copia todos os recursos que o projeto necessita como imagens, css e etc\n */\ngulp.task(\"resources\", () => {\n    return gulp.src([\"src/**/*\"])\n        .pipe(gulp.dest(\"build\"));\n});\n/**\n * Copia todas as dependências para a pasta lib\n */\ngulp.task(\"libs\", () => {\n    return gulp.src([\n            'core-js/client/shim.min.js',\n            'systemjs/dist/system-polyfills.js',\n            'systemjs/dist/system.src.js',\n            'reflect-metadata/Reflect.js',\n            'rxjs/**',\n            'zone.js/dist/**',\n            '@angular/**',\n            '@types/**',\n        ], {cwd: \"node_modules/**\"}) /* Glob required here. */\n        .pipe(gulp.dest(\"build/lib\"));\n});\n/**\n * Cria Watch para mudanças no TypeScript, HTML e css\n */\ngulp.task('watch', function () {\n    gulp.watch([\"src/**/*.ts\"], ['compile']).on('change', function (e) {\n        console.log('TypeScript file ' + e.path + ' has been changed. Compiling.');\n    });\n    gulp.watch([\"src/**/*.html\", \"src/**/*.css\"], ['resources']).on('change', function (e) {\n        console.log('Resource file ' + e.path + ' has been changed. Updating.');\n    });\n});\n/**\n * Compila o projeto\n */\ngulp.task(\"build\", ['compile', 'resources', 'libs'], () => {\n    console.log(\"Building the project ...\");\n});\n"]}